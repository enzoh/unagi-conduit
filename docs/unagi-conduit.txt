-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | conduits for unagi channels
--   
--   see README.md
@package unagi-conduit
@version 1.0.0.0


-- | This module dumbly rounds up Unagi channels into a <a>Readable</a> and
--   a <a>Writeable</a> typeclass, to be used by
--   <a>Data.Conduit.Chan.Unagi</a>.
module Data.Conduit.Chan.Unagi.Types

-- | A typeclass for readable, blocking Unagi channels
class Readable chan where type family ReadableConstraint chan a :: Constraint
readChan :: (Readable chan, ReadableConstraint chan a) => chan a -> IO a

-- | A typeclass for writeable, blocking Unagi channels
class Writeable chan where type family WriteableConstraint chan a :: Constraint
writeChan :: (Writeable chan, WriteableConstraint chan a) => chan a -> a -> IO ()

-- | <a>Control.Concurrent.Chan.Unagi.OutChan</a> (unbounded queue)

-- | <a>Control.Concurrent.Chan.Unagi.Bounded.OutChan</a> (bounded queue)

-- | <a>Control.Concurrent.Chan.Unagi.Unboxed.OutChan</a> (unbounded queue
--   for unboxed types)

-- | <a>Control.Concurrent.Chan.Unagi.InChan</a> (unbounded queue)

-- | <a>Control.Concurrent.Chan.Unagi.Bounded.InChan</a> (bounded queue)

-- | <a>Control.Concurrent.Chan.Unagi.Unboxed.InChan</a> (unbounded queue
--   for unboxed types)
instance Data.Conduit.Chan.Unagi.Types.Readable Control.Concurrent.Chan.Unagi.Internal.OutChan
instance Data.Conduit.Chan.Unagi.Types.Readable Control.Concurrent.Chan.Unagi.Bounded.Internal.OutChan
instance Data.Conduit.Chan.Unagi.Types.Readable Control.Concurrent.Chan.Unagi.Unboxed.Internal.OutChan
instance Data.Conduit.Chan.Unagi.Types.Writeable Control.Concurrent.Chan.Unagi.Internal.InChan
instance Data.Conduit.Chan.Unagi.Types.Writeable Control.Concurrent.Chan.Unagi.Bounded.Internal.InChan
instance Data.Conduit.Chan.Unagi.Types.Writeable Control.Concurrent.Chan.Unagi.Unboxed.Internal.InChan


-- | This module dumbly wraps up blocking Unagi channels into conduit
--   sources and sinks.
module Data.Conduit.Chan.Unagi

-- | Data arriving on the out-channel is passed to the source
sourceChan :: (MonadIO m, Readable chan, ReadableConstraint chan a) => chan a -> Source m a

-- | Data arriving on the sink is passed to the in-channel
sinkChan :: (MonadIO m, Writeable chan, WriteableConstraint chan a) => chan a -> Sink a m ()
